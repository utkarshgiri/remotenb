import sys
import fire
import rich
import time
import invoke
import socket
import logging
import subprocess
import webbrowser
from rich.logging import RichHandler
from fabric import Config, Connection
from remotenb.helpers import *

logger = logging.getLogger(__name__)
logger.propagate = False
logger.setLevel(logging.DEBUG)
handler = RichHandler()
logger.addHandler(handler)


def assert_executable_found(client, executables):
    if not isinstance(executables, list):
        executables = [executables]
    for executable in executables:
        try:
            result = client.run(f'command -v {executable}', hide=True)
        except invoke.exceptions.UnexpectedExit:
            logger.info(f'{executable} not found. Please manually provide remote {executable} path using --executable argument')
            sys.exit()
    logger.info('All required executables found. Yay!')

def get_notebooks(client, executable):
    listing = f'{executable} {"list"}'
    try:
        notebooks = "{.stdout}".format(client.run(listing, hide=True)).split('\n')[1:-1]; time.sleep(2)
        if len(notebooks) == 0:
            raise Exception
        logger.info('Notebook found. Connecting ...')
    except:
        logger.info('Starting new session ...')
        kill_tmux(client); time.sleep(2)
        notebooks = start_session(client, executable); time.sleep(5)
    return notebooks 

def main(host, user='ugiri', browser='chrome', lab=False, executable=None):
    
    client = Connection(host=host, user=user, forward_agent=True)
    
    if executable is None:
        executable = f'jupyter-{"lab" if lab else "notebook"}'
    
    assert_executable_found(client, [executable, 'tmux'])
    
    notebooks = get_notebooks(client, executable)
   
    if len(notebooks) > 1:
        logger.info('More than one running server found. Closing all of them and restaring a new session')
        all_ports = [int(x.split('localhost:')[-1].split('/')[0]) for x in notebooks if bool(x)]
        close_sessions(client, executable, all_ports)
        notebooks = start_session(client, executable); time.sleep(4)
     
    #The following code is the logic after a single jupyter server has been successfully started on a remote server inside a tmux session
    #Get the remote port number
    remote_port = notebooks[0].split('localhost:')[-1].split('/')[0]
    #Get the token
    remote_token = notebooks[0].split("token=")[-1].split("::")[0]
    #Close the client object that was handling operations on remote server
    client.close()
    #Create a socket and get a free port number for localhost
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(('localhost', 0))
    s.listen(1)
    #Get the local port to be used
    local_port = s.getsockname()[1]
    #cllose socket
    s.close()
    #Compose the tunneling command to be executed on the client side
    local_notebook_command = 'ssh -N -f -L localhost:{}:localhost:{} {}'.format(local_port, remote_port, "{}@{}".format(user, host))
    #execute the above command
    subprocess.call(local_notebook_command, shell=True)
    #Compose the url for opening the notebook
    url='http://localhost:{}/?token={}'.format(local_port, remote_token)
    #Open the notebook on the desired browser
    #webbrowser.get(browsers[browser]).open(url=url.split('ugiri/')[-1])
    webbrowser.get(get_browser_driver(browser)).open(url=url.split('ugiri/')[-1])
    #webbrowser.open(url=url)

if __name__ == '__main__':
    fire.Fire(main)

